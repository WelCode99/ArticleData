##############################################################################
# 1) Instala e/ou carrega os pacotes
##############################################################################
if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")
if (!requireNamespace("microdatasus", quietly = TRUE)) {
  remotes::install_github("rfsaldanha/microdatasus")
}
if (!requireNamespace("data.table", quietly = TRUE)) install.packages("data.table")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")

library(microdatasus)
library(dplyr)
library(data.table)  # para fwrite()

##############################################################################
# 2) Vetor de siglas de UFs e Anos
##############################################################################

ufs <- c("AC","AL","AM","AP","BA","CE","DF","ES","GO","MA",
         "MG","MS","MT","PA","PB","PE","PI","PR","RJ","RN",
         "RO","RR","RS","SC","SE","SP","TO")

# Se quiser *todas*, inclua "TO" e as que faltarem.  
# Caso deseje filtrar alguma UF, basta remover do vetor.

anos <- 2010:2024  # ajuste conforme sua necessidade

##############################################################################
# 3) Definir arquivo CSV de saída
##############################################################################
arquivo_saida <- "SIH_ArtriteSeptica_BrasilUFporUFCIDADICIONAL.csv"

# Se já existir, remove para começar do zero
if (file.exists(arquivo_saida)) {
  file.remove(arquivo_saida)
}

##############################################################################
# 4) Lista de códigos CID de artrite séptica (sem ponto)
##############################################################################
cids_artrite_septica <- c(
  "M000","M001","M002","M008","M009",   # M00.0 a M00.9
  "M010","M011","M012","M013","M014",
  "M015","M016","M018","M019",         # M01.0 a M01.9
  "M030",                               # M03.0
  "A544"
)

##############################################################################
# 5) Função para baixar e processar
##############################################################################
baixar_processar_sih <- function(ano, uf_i) {
  # Mensagem de status
  cat(sprintf("\n--- Processando ano %d, UF=%s ---\n", ano, uf_i))
  
  # Baixa dados do DATASUS (SIH-RD)
  dados_brutos <- tryCatch(
    fetch_datasus(
      year_start         = ano,
      year_end           = ano,
      month_start        = 1,
      month_end          = 12,
      uf                 = uf_i,
      information_system = "SIH-RD"
    ),
    error = function(e) {
      cat("Erro no fetch_datasus: ", e$message, "\n")
      return(NULL)
    }
  )
  
  # Se falhou ou veio vazio, retorna
  if (is.null(dados_brutos) || nrow(dados_brutos) == 0) {
    cat("Nenhum dado encontrado.\n")
    return(NULL)
  }
  
  # Processa (conversão de tipos, padronização)
  dados_processados <- process_sih(
    data               = dados_brutos,
    information_system = "SIH-RD"
  )
  
  # Criar coluna DIAG_PRINC sem ponto
  # Ex.: "M00.0" => "M000"
  dados_processados <- dados_processados %>%
    mutate(DIAG_PRINC_PAD = toupper(gsub("\\.", "", DIAG_PRINC)))
  
  # Filtra:
  # - idade >= 18 anos
  # - DIAG_PRINC_PAD dentro da lista de artrite séptica
  dados_filtrados <- dados_processados %>%
    filter(
      IDADE >= 18,
      DIAG_PRINC_PAD %in% cids_artrite_septica
    )
  
  if (nrow(dados_filtrados) == 0) {
    cat("Nenhum registro após filtro.\n")
    return(NULL)
  }
  
  # Retorna o data.frame filtrado
  return(dados_filtrados)
}

##############################################################################
# 6) Loop principal (UF x ano), salvando incrementalmente no CSV
##############################################################################

for (uf_i in ufs) {
  for (ano in anos) {
    # Baixa + processa + filtra
    df_filtrado <- baixar_processar_sih(ano, uf_i)
    
    # Se veio NULL ou 0 linhas, pula
    if (is.null(df_filtrado) || nrow(df_filtrado) == 0) {
      next
    }
    
    # Verifica se precisa escrever cabeçalho
    escrever_cabecalho <- !file.exists(arquivo_saida)
    
    # Salva no CSV
    fwrite(
      df_filtrado,
      file      = arquivo_saida,
      append    = TRUE,
      col.names = escrever_cabecalho
    )
    
    cat(sprintf("UF=%s, ano=%d => %d linhas filtradas e salvas.\n",
                uf_i, ano, nrow(df_filtrado)))
    
    # Libera memória
    rm(df_filtrado)
    gc()
  }
}

cat("\n\n=== Fim do processo! ===\n")
cat(sprintf("Dados salvos em: %s\n", arquivo_saida))
